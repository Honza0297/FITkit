# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fitkit', [dirname(__file__)])
        except ImportError:
            import _fitkit
            return _fitkit
        if fp is not None:
            try:
                _mod = imp.load_module('_fitkit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fitkit = swig_import_helper()
    del swig_import_helper
else:
    import _fitkit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fitkit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _fitkit.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _fitkit.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _fitkit.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _fitkit.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _fitkit.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _fitkit.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _fitkit.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _fitkit.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _fitkit.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fitkit.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _fitkit.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _fitkit.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fitkit.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fitkit.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fitkit.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _fitkit.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fitkit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DeviceList(_object):
    """Proxy of C++ std::vector<(p.Device)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceList, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(DeviceList self) -> SwigPyIterator"""
        return _fitkit.DeviceList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(DeviceList self) -> bool"""
        return _fitkit.DeviceList___nonzero__(self)


    def __bool__(self):
        """__bool__(DeviceList self) -> bool"""
        return _fitkit.DeviceList___bool__(self)


    def __len__(self):
        """__len__(DeviceList self) -> std::vector< Device * >::size_type"""
        return _fitkit.DeviceList___len__(self)


    def pop(self):
        """pop(DeviceList self) -> Device"""
        return _fitkit.DeviceList_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(DeviceList self, std::vector< Device * >::difference_type i, std::vector< Device * >::difference_type j) -> DeviceList"""
        return _fitkit.DeviceList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DeviceList self, std::vector< Device * >::difference_type i, std::vector< Device * >::difference_type j, DeviceList v)
        __setslice__(DeviceList self, std::vector< Device * >::difference_type i, std::vector< Device * >::difference_type j)
        """
        return _fitkit.DeviceList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(DeviceList self, std::vector< Device * >::difference_type i, std::vector< Device * >::difference_type j)"""
        return _fitkit.DeviceList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DeviceList self, std::vector< Device * >::difference_type i)
        __delitem__(DeviceList self, PySliceObject * slice)
        """
        return _fitkit.DeviceList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DeviceList self, PySliceObject * slice) -> DeviceList
        __getitem__(DeviceList self, std::vector< Device * >::difference_type i) -> Device
        """
        return _fitkit.DeviceList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DeviceList self, PySliceObject * slice, DeviceList v)
        __setitem__(DeviceList self, PySliceObject * slice)
        __setitem__(DeviceList self, std::vector< Device * >::difference_type i, Device x)
        """
        return _fitkit.DeviceList___setitem__(self, *args)


    def append(self, x):
        """append(DeviceList self, Device x)"""
        return _fitkit.DeviceList_append(self, x)


    def empty(self):
        """empty(DeviceList self) -> bool"""
        return _fitkit.DeviceList_empty(self)


    def size(self):
        """size(DeviceList self) -> std::vector< Device * >::size_type"""
        return _fitkit.DeviceList_size(self)


    def clear(self):
        """clear(DeviceList self)"""
        return _fitkit.DeviceList_clear(self)


    def swap(self, v):
        """swap(DeviceList self, DeviceList v)"""
        return _fitkit.DeviceList_swap(self, v)


    def get_allocator(self):
        """get_allocator(DeviceList self) -> std::vector< Device * >::allocator_type"""
        return _fitkit.DeviceList_get_allocator(self)


    def begin(self):
        """begin(DeviceList self) -> std::vector< Device * >::iterator"""
        return _fitkit.DeviceList_begin(self)


    def end(self):
        """end(DeviceList self) -> std::vector< Device * >::iterator"""
        return _fitkit.DeviceList_end(self)


    def rbegin(self):
        """rbegin(DeviceList self) -> std::vector< Device * >::reverse_iterator"""
        return _fitkit.DeviceList_rbegin(self)


    def rend(self):
        """rend(DeviceList self) -> std::vector< Device * >::reverse_iterator"""
        return _fitkit.DeviceList_rend(self)


    def pop_back(self):
        """pop_back(DeviceList self)"""
        return _fitkit.DeviceList_pop_back(self)


    def erase(self, *args):
        """
        erase(DeviceList self, std::vector< Device * >::iterator pos) -> std::vector< Device * >::iterator
        erase(DeviceList self, std::vector< Device * >::iterator first, std::vector< Device * >::iterator last) -> std::vector< Device * >::iterator
        """
        return _fitkit.DeviceList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.Device)> self) -> DeviceList
        __init__(std::vector<(p.Device)> self, DeviceList arg2) -> DeviceList
        __init__(std::vector<(p.Device)> self, std::vector< Device * >::size_type size) -> DeviceList
        __init__(std::vector<(p.Device)> self, std::vector< Device * >::size_type size, Device value) -> DeviceList
        """
        this = _fitkit.new_DeviceList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(DeviceList self, Device x)"""
        return _fitkit.DeviceList_push_back(self, x)


    def front(self):
        """front(DeviceList self) -> Device"""
        return _fitkit.DeviceList_front(self)


    def back(self):
        """back(DeviceList self) -> Device"""
        return _fitkit.DeviceList_back(self)


    def assign(self, n, x):
        """assign(DeviceList self, std::vector< Device * >::size_type n, Device x)"""
        return _fitkit.DeviceList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DeviceList self, std::vector< Device * >::size_type new_size)
        resize(DeviceList self, std::vector< Device * >::size_type new_size, Device x)
        """
        return _fitkit.DeviceList_resize(self, *args)


    def insert(self, *args):
        """
        insert(DeviceList self, std::vector< Device * >::iterator pos, Device x) -> std::vector< Device * >::iterator
        insert(DeviceList self, std::vector< Device * >::iterator pos, std::vector< Device * >::size_type n, Device x)
        """
        return _fitkit.DeviceList_insert(self, *args)


    def reserve(self, n):
        """reserve(DeviceList self, std::vector< Device * >::size_type n)"""
        return _fitkit.DeviceList_reserve(self, n)


    def capacity(self):
        """capacity(DeviceList self) -> std::vector< Device * >::size_type"""
        return _fitkit.DeviceList_capacity(self)

    __swig_destroy__ = _fitkit.delete_DeviceList
    __del__ = lambda self: None
DeviceList_swigregister = _fitkit.DeviceList_swigregister
DeviceList_swigregister(DeviceList)

class MatchList(_object):
    """Proxy of C++ std::vector<(DeviceMatch)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchList, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(MatchList self) -> SwigPyIterator"""
        return _fitkit.MatchList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(MatchList self) -> bool"""
        return _fitkit.MatchList___nonzero__(self)


    def __bool__(self):
        """__bool__(MatchList self) -> bool"""
        return _fitkit.MatchList___bool__(self)


    def __len__(self):
        """__len__(MatchList self) -> std::vector< DeviceMatch >::size_type"""
        return _fitkit.MatchList___len__(self)


    def pop(self):
        """pop(MatchList self) -> DeviceMatch"""
        return _fitkit.MatchList_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(MatchList self, std::vector< DeviceMatch >::difference_type i, std::vector< DeviceMatch >::difference_type j) -> MatchList"""
        return _fitkit.MatchList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(MatchList self, std::vector< DeviceMatch >::difference_type i, std::vector< DeviceMatch >::difference_type j, MatchList v)
        __setslice__(MatchList self, std::vector< DeviceMatch >::difference_type i, std::vector< DeviceMatch >::difference_type j)
        """
        return _fitkit.MatchList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(MatchList self, std::vector< DeviceMatch >::difference_type i, std::vector< DeviceMatch >::difference_type j)"""
        return _fitkit.MatchList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(MatchList self, std::vector< DeviceMatch >::difference_type i)
        __delitem__(MatchList self, PySliceObject * slice)
        """
        return _fitkit.MatchList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(MatchList self, PySliceObject * slice) -> MatchList
        __getitem__(MatchList self, std::vector< DeviceMatch >::difference_type i) -> DeviceMatch
        """
        return _fitkit.MatchList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(MatchList self, PySliceObject * slice, MatchList v)
        __setitem__(MatchList self, PySliceObject * slice)
        __setitem__(MatchList self, std::vector< DeviceMatch >::difference_type i, DeviceMatch x)
        """
        return _fitkit.MatchList___setitem__(self, *args)


    def append(self, x):
        """append(MatchList self, DeviceMatch x)"""
        return _fitkit.MatchList_append(self, x)


    def empty(self):
        """empty(MatchList self) -> bool"""
        return _fitkit.MatchList_empty(self)


    def size(self):
        """size(MatchList self) -> std::vector< DeviceMatch >::size_type"""
        return _fitkit.MatchList_size(self)


    def clear(self):
        """clear(MatchList self)"""
        return _fitkit.MatchList_clear(self)


    def swap(self, v):
        """swap(MatchList self, MatchList v)"""
        return _fitkit.MatchList_swap(self, v)


    def get_allocator(self):
        """get_allocator(MatchList self) -> std::vector< DeviceMatch >::allocator_type"""
        return _fitkit.MatchList_get_allocator(self)


    def begin(self):
        """begin(MatchList self) -> std::vector< DeviceMatch >::iterator"""
        return _fitkit.MatchList_begin(self)


    def end(self):
        """end(MatchList self) -> std::vector< DeviceMatch >::iterator"""
        return _fitkit.MatchList_end(self)


    def rbegin(self):
        """rbegin(MatchList self) -> std::vector< DeviceMatch >::reverse_iterator"""
        return _fitkit.MatchList_rbegin(self)


    def rend(self):
        """rend(MatchList self) -> std::vector< DeviceMatch >::reverse_iterator"""
        return _fitkit.MatchList_rend(self)


    def pop_back(self):
        """pop_back(MatchList self)"""
        return _fitkit.MatchList_pop_back(self)


    def erase(self, *args):
        """
        erase(MatchList self, std::vector< DeviceMatch >::iterator pos) -> std::vector< DeviceMatch >::iterator
        erase(MatchList self, std::vector< DeviceMatch >::iterator first, std::vector< DeviceMatch >::iterator last) -> std::vector< DeviceMatch >::iterator
        """
        return _fitkit.MatchList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(DeviceMatch)> self) -> MatchList
        __init__(std::vector<(DeviceMatch)> self, MatchList arg2) -> MatchList
        __init__(std::vector<(DeviceMatch)> self, std::vector< DeviceMatch >::size_type size, DeviceMatch value) -> MatchList
        """
        this = _fitkit.new_MatchList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(MatchList self, DeviceMatch x)"""
        return _fitkit.MatchList_push_back(self, x)


    def front(self):
        """front(MatchList self) -> DeviceMatch"""
        return _fitkit.MatchList_front(self)


    def back(self):
        """back(MatchList self) -> DeviceMatch"""
        return _fitkit.MatchList_back(self)


    def assign(self, n, x):
        """assign(MatchList self, std::vector< DeviceMatch >::size_type n, DeviceMatch x)"""
        return _fitkit.MatchList_assign(self, n, x)


    def resize(self, new_size, x):
        """resize(MatchList self, std::vector< DeviceMatch >::size_type new_size, DeviceMatch x)"""
        return _fitkit.MatchList_resize(self, new_size, x)


    def insert(self, *args):
        """
        insert(MatchList self, std::vector< DeviceMatch >::iterator pos, DeviceMatch x) -> std::vector< DeviceMatch >::iterator
        insert(MatchList self, std::vector< DeviceMatch >::iterator pos, std::vector< DeviceMatch >::size_type n, DeviceMatch x)
        """
        return _fitkit.MatchList_insert(self, *args)


    def reserve(self, n):
        """reserve(MatchList self, std::vector< DeviceMatch >::size_type n)"""
        return _fitkit.MatchList_reserve(self, n)


    def capacity(self):
        """capacity(MatchList self) -> std::vector< DeviceMatch >::size_type"""
        return _fitkit.MatchList_capacity(self)

    __swig_destroy__ = _fitkit.delete_MatchList
    __del__ = lambda self: None
MatchList_swigregister = _fitkit.MatchList_swigregister
MatchList_swigregister(MatchList)

class BackendList(_object):
    """Proxy of C++ std::vector<(p.DeviceBackend)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackendList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackendList, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(BackendList self) -> SwigPyIterator"""
        return _fitkit.BackendList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(BackendList self) -> bool"""
        return _fitkit.BackendList___nonzero__(self)


    def __bool__(self):
        """__bool__(BackendList self) -> bool"""
        return _fitkit.BackendList___bool__(self)


    def __len__(self):
        """__len__(BackendList self) -> std::vector< DeviceBackend * >::size_type"""
        return _fitkit.BackendList___len__(self)


    def pop(self):
        """pop(BackendList self) -> DeviceBackend"""
        return _fitkit.BackendList_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(BackendList self, std::vector< DeviceBackend * >::difference_type i, std::vector< DeviceBackend * >::difference_type j) -> BackendList"""
        return _fitkit.BackendList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(BackendList self, std::vector< DeviceBackend * >::difference_type i, std::vector< DeviceBackend * >::difference_type j, BackendList v)
        __setslice__(BackendList self, std::vector< DeviceBackend * >::difference_type i, std::vector< DeviceBackend * >::difference_type j)
        """
        return _fitkit.BackendList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(BackendList self, std::vector< DeviceBackend * >::difference_type i, std::vector< DeviceBackend * >::difference_type j)"""
        return _fitkit.BackendList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(BackendList self, std::vector< DeviceBackend * >::difference_type i)
        __delitem__(BackendList self, PySliceObject * slice)
        """
        return _fitkit.BackendList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(BackendList self, PySliceObject * slice) -> BackendList
        __getitem__(BackendList self, std::vector< DeviceBackend * >::difference_type i) -> DeviceBackend
        """
        return _fitkit.BackendList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(BackendList self, PySliceObject * slice, BackendList v)
        __setitem__(BackendList self, PySliceObject * slice)
        __setitem__(BackendList self, std::vector< DeviceBackend * >::difference_type i, DeviceBackend x)
        """
        return _fitkit.BackendList___setitem__(self, *args)


    def append(self, x):
        """append(BackendList self, DeviceBackend x)"""
        return _fitkit.BackendList_append(self, x)


    def empty(self):
        """empty(BackendList self) -> bool"""
        return _fitkit.BackendList_empty(self)


    def size(self):
        """size(BackendList self) -> std::vector< DeviceBackend * >::size_type"""
        return _fitkit.BackendList_size(self)


    def clear(self):
        """clear(BackendList self)"""
        return _fitkit.BackendList_clear(self)


    def swap(self, v):
        """swap(BackendList self, BackendList v)"""
        return _fitkit.BackendList_swap(self, v)


    def get_allocator(self):
        """get_allocator(BackendList self) -> std::vector< DeviceBackend * >::allocator_type"""
        return _fitkit.BackendList_get_allocator(self)


    def begin(self):
        """begin(BackendList self) -> std::vector< DeviceBackend * >::iterator"""
        return _fitkit.BackendList_begin(self)


    def end(self):
        """end(BackendList self) -> std::vector< DeviceBackend * >::iterator"""
        return _fitkit.BackendList_end(self)


    def rbegin(self):
        """rbegin(BackendList self) -> std::vector< DeviceBackend * >::reverse_iterator"""
        return _fitkit.BackendList_rbegin(self)


    def rend(self):
        """rend(BackendList self) -> std::vector< DeviceBackend * >::reverse_iterator"""
        return _fitkit.BackendList_rend(self)


    def pop_back(self):
        """pop_back(BackendList self)"""
        return _fitkit.BackendList_pop_back(self)


    def erase(self, *args):
        """
        erase(BackendList self, std::vector< DeviceBackend * >::iterator pos) -> std::vector< DeviceBackend * >::iterator
        erase(BackendList self, std::vector< DeviceBackend * >::iterator first, std::vector< DeviceBackend * >::iterator last) -> std::vector< DeviceBackend * >::iterator
        """
        return _fitkit.BackendList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.DeviceBackend)> self) -> BackendList
        __init__(std::vector<(p.DeviceBackend)> self, BackendList arg2) -> BackendList
        __init__(std::vector<(p.DeviceBackend)> self, std::vector< DeviceBackend * >::size_type size) -> BackendList
        __init__(std::vector<(p.DeviceBackend)> self, std::vector< DeviceBackend * >::size_type size, DeviceBackend value) -> BackendList
        """
        this = _fitkit.new_BackendList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(BackendList self, DeviceBackend x)"""
        return _fitkit.BackendList_push_back(self, x)


    def front(self):
        """front(BackendList self) -> DeviceBackend"""
        return _fitkit.BackendList_front(self)


    def back(self):
        """back(BackendList self) -> DeviceBackend"""
        return _fitkit.BackendList_back(self)


    def assign(self, n, x):
        """assign(BackendList self, std::vector< DeviceBackend * >::size_type n, DeviceBackend x)"""
        return _fitkit.BackendList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(BackendList self, std::vector< DeviceBackend * >::size_type new_size)
        resize(BackendList self, std::vector< DeviceBackend * >::size_type new_size, DeviceBackend x)
        """
        return _fitkit.BackendList_resize(self, *args)


    def insert(self, *args):
        """
        insert(BackendList self, std::vector< DeviceBackend * >::iterator pos, DeviceBackend x) -> std::vector< DeviceBackend * >::iterator
        insert(BackendList self, std::vector< DeviceBackend * >::iterator pos, std::vector< DeviceBackend * >::size_type n, DeviceBackend x)
        """
        return _fitkit.BackendList_insert(self, *args)


    def reserve(self, n):
        """reserve(BackendList self, std::vector< DeviceBackend * >::size_type n)"""
        return _fitkit.BackendList_reserve(self, n)


    def capacity(self):
        """capacity(BackendList self) -> std::vector< DeviceBackend * >::size_type"""
        return _fitkit.BackendList_capacity(self)

    __swig_destroy__ = _fitkit.delete_BackendList
    __del__ = lambda self: None
BackendList_swigregister = _fitkit.BackendList_swigregister
BackendList_swigregister(BackendList)

class DeviceData(_object):
    """Proxy of C++ DeviceData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(DeviceData self) -> DeviceData"""
        this = _fitkit.new_DeviceData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fitkit.delete_DeviceData
    __del__ = lambda self: None

    def lockData(self):
        """lockData(DeviceData self) -> int"""
        return _fitkit.DeviceData_lockData(self)


    def unlockData(self):
        """unlockData(DeviceData self) -> int"""
        return _fitkit.DeviceData_unlockData(self)

    __swig_setmethods__["vid"] = _fitkit.DeviceData_vid_set
    __swig_getmethods__["vid"] = _fitkit.DeviceData_vid_get
    if _newclass:
        vid = _swig_property(_fitkit.DeviceData_vid_get, _fitkit.DeviceData_vid_set)
    __swig_setmethods__["pid"] = _fitkit.DeviceData_pid_set
    __swig_getmethods__["pid"] = _fitkit.DeviceData_pid_get
    if _newclass:
        pid = _swig_property(_fitkit.DeviceData_pid_get, _fitkit.DeviceData_pid_set)
    __swig_setmethods__["flags"] = _fitkit.DeviceData_flags_set
    __swig_getmethods__["flags"] = _fitkit.DeviceData_flags_get
    if _newclass:
        flags = _swig_property(_fitkit.DeviceData_flags_get, _fitkit.DeviceData_flags_set)
    __swig_setmethods__["backend"] = _fitkit.DeviceData_backend_set
    __swig_getmethods__["backend"] = _fitkit.DeviceData_backend_get
    if _newclass:
        backend = _swig_property(_fitkit.DeviceData_backend_get, _fitkit.DeviceData_backend_set)
DeviceData_swigregister = _fitkit.DeviceData_swigregister
DeviceData_swigregister(DeviceData)

class Device(_object):
    """Proxy of C++ Device class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ChannelA = _fitkit.Device_ChannelA
    ChannelB = _fitkit.Device_ChannelB
    Bits7 = _fitkit.Device_Bits7
    Bits8 = _fitkit.Device_Bits8
    StopBits1 = _fitkit.Device_StopBits1
    StopBits15 = _fitkit.Device_StopBits15
    StopBits2 = _fitkit.Device_StopBits2
    ParityNone = _fitkit.Device_ParityNone
    ParityOdd = _fitkit.Device_ParityOdd
    ParityEven = _fitkit.Device_ParityEven
    ParityMark = _fitkit.Device_ParityMark
    ParitySpace = _fitkit.Device_ParitySpace
    Input = _fitkit.Device_Input
    Output = _fitkit.Device_Output
    Acquired = _fitkit.Device_Acquired
    Checked = _fitkit.Device_Checked
    DeleteLater = _fitkit.Device_DeleteLater
    New = _fitkit.Device_New
    Virtual = _fitkit.Device_Virtual
    Shared = _fitkit.Device_Shared
    __swig_destroy__ = _fitkit.delete_Device
    __del__ = lambda self: None

    def id(self):
        """id(Device self) -> int"""
        return _fitkit.Device_id(self)


    def vid(self):
        """vid(Device self) -> int"""
        return _fitkit.Device_vid(self)


    def pid(self):
        """pid(Device self) -> int"""
        return _fitkit.Device_pid(self)


    def flags(self):
        """flags(Device self) -> int"""
        return _fitkit.Device_flags(self)


    def setFlags(self, flags):
        """setFlags(Device self, int flags) -> int"""
        return _fitkit.Device_setFlags(self, flags)


    def addFlag(self, flag):
        """addFlag(Device self, int flag) -> int"""
        return _fitkit.Device_addFlag(self, flag)


    def removeFlag(self, flag):
        """removeFlag(Device self, int flag) -> int"""
        return _fitkit.Device_removeFlag(self, flag)


    def data(self):
        """data(Device self) -> DeviceData"""
        return _fitkit.Device_data(self)


    def closeAll(self):
        """closeAll(Device self) -> int"""
        return _fitkit.Device_closeAll(self)


    def channel(self, *args):
        """
        channel(Device self, Device::ChannelId const chan) -> IOChannel
        channel(Device self, char const chan) -> IOChannel
        channel(Device self) -> IOChannel
        """
        return _fitkit.Device_channel(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Device self, Device::ChannelId const chan) -> IOChannel
        __getitem__(Device self, char const chan) -> IOChannel
        """
        return _fitkit.Device___getitem__(self, *args)

Device_swigregister = _fitkit.Device_swigregister
Device_swigregister(Device)
cvar = _fitkit.cvar
Device.DEFAULT_VID = _fitkit.cvar.Device_DEFAULT_VID
Device.DEFAULT_PID = _fitkit.cvar.Device_DEFAULT_PID
Device.DEFAULT_RATE = _fitkit.cvar.Device_DEFAULT_RATE
Device.DEFAULT_BIT = _fitkit.cvar.Device_DEFAULT_BIT
Device.DEFAULT_STOPBIT = _fitkit.cvar.Device_DEFAULT_STOPBIT
Device.DEFAULT_PARITY = _fitkit.cvar.Device_DEFAULT_PARITY
Device.DEFAULT_CHANNEL = _fitkit.cvar.Device_DEFAULT_CHANNEL

class IOChannel(_object):
    """Proxy of C++ IOChannel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOChannel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fitkit.delete_IOChannel
    __del__ = lambda self: None
    Ok = _fitkit.IOChannel_Ok
    NotOpen = _fitkit.IOChannel_NotOpen
    NotFound = _fitkit.IOChannel_NotFound
    AlreadyOpen = _fitkit.IOChannel_AlreadyOpen
    CantClaim = _fitkit.IOChannel_CantClaim
    CantConfig = _fitkit.IOChannel_CantConfig
    IOError = _fitkit.IOChannel_IOError
    CreateError = _fitkit.IOChannel_CreateError

    def channelId(self):
        """channelId(IOChannel self) -> Device::ChannelId const"""
        return _fitkit.IOChannel_channelId(self)


    def vendor(self):
        """vendor(IOChannel self) -> string const &"""
        return _fitkit.IOChannel_vendor(self)


    def product(self):
        """product(IOChannel self) -> string const &"""
        return _fitkit.IOChannel_product(self)


    def serial(self):
        """serial(IOChannel self) -> string const &"""
        return _fitkit.IOChannel_serial(self)


    def setVendor(self, *args):
        """
        setVendor(IOChannel self, string const & s) -> IOChannel
        setVendor(IOChannel self) -> IOChannel
        """
        return _fitkit.IOChannel_setVendor(self, *args)


    def setProduct(self, *args):
        """
        setProduct(IOChannel self, string const & s) -> IOChannel
        setProduct(IOChannel self) -> IOChannel
        """
        return _fitkit.IOChannel_setProduct(self, *args)


    def setSerial(self, *args):
        """
        setSerial(IOChannel self, string const & s) -> IOChannel
        setSerial(IOChannel self) -> IOChannel
        """
        return _fitkit.IOChannel_setSerial(self, *args)


    def isOpen(self):
        """isOpen(IOChannel self) -> int"""
        return _fitkit.IOChannel_isOpen(self)


    def bytesIn(self):
        """bytesIn(IOChannel self) -> int"""
        return _fitkit.IOChannel_bytesIn(self)


    def open(self):
        """open(IOChannel self) -> int"""
        return _fitkit.IOChannel_open(self)


    def close(self):
        """close(IOChannel self) -> int"""
        return _fitkit.IOChannel_close(self)


    def flush(self, *args):
        """
        flush(IOChannel self, int flags) -> int
        flush(IOChannel self) -> int
        """
        return _fitkit.IOChannel_flush(self, *args)


    def setBaudRate(self, rate):
        """setBaudRate(IOChannel self, int rate) -> int"""
        return _fitkit.IOChannel_setBaudRate(self, rate)


    def configure(self, bits, s_bits, parity):
        """configure(IOChannel self, Device::Bits bits, Device::StopBits s_bits, Device::Parity parity) -> int"""
        return _fitkit.IOChannel_configure(self, bits, s_bits, parity)


    def setMode(self, mask, mode):
        """setMode(IOChannel self, int mask, int mode) -> int"""
        return _fitkit.IOChannel_setMode(self, mask, mode)


    def setDtr(self, state):
        """setDtr(IOChannel self, bool state) -> int"""
        return _fitkit.IOChannel_setDtr(self, state)


    def setRts(self, state):
        """setRts(IOChannel self, bool state) -> int"""
        return _fitkit.IOChannel_setRts(self, state)


    def resetMCU(self):
        """resetMCU(IOChannel self) -> int"""
        return _fitkit.IOChannel_resetMCU(self)


    def read(self, *args):
        """read(IOChannel self, char * dest, int timeout) -> int"""
        return _fitkit.IOChannel_read(self, *args)


    def readsome(self, *args):
        """readsome(IOChannel self, char * dest, int maxlen, int timeout) -> int"""
        return _fitkit.IOChannel_readsome(self, *args)


    def write(self, src, count):
        """write(IOChannel self, char const * src, int count) -> int"""
        return _fitkit.IOChannel_write(self, src, count)


    def start(self):
        """start(IOChannel self) -> int"""
        return _fitkit.IOChannel_start(self)


    def terminate(self):
        """terminate(IOChannel self) -> int"""
        return _fitkit.IOChannel_terminate(self)


    def setLatency(self, latency):
        """setLatency(IOChannel self, int latency)"""
        return _fitkit.IOChannel_setLatency(self, latency)


    def __lshift__(self, *args):
        """
        __lshift__(IOChannel self, string const & src) -> IOChannel
        __lshift__(IOChannel self, char const * src) -> IOChannel
        """
        return _fitkit.IOChannel___lshift__(self, *args)

IOChannel_swigregister = _fitkit.IOChannel_swigregister
IOChannel_swigregister(IOChannel)

class DeviceMatch(_object):
    """Proxy of C++ DeviceMatch class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceMatch, name)
    __repr__ = _swig_repr

    def __init__(self, _vid, _pid):
        """__init__(DeviceMatch self, int _vid, int _pid) -> DeviceMatch"""
        this = _fitkit.new_DeviceMatch(_vid, _pid)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["vid"] = _fitkit.DeviceMatch_vid_set
    __swig_getmethods__["vid"] = _fitkit.DeviceMatch_vid_get
    if _newclass:
        vid = _swig_property(_fitkit.DeviceMatch_vid_get, _fitkit.DeviceMatch_vid_set)
    __swig_setmethods__["pid"] = _fitkit.DeviceMatch_pid_set
    __swig_getmethods__["pid"] = _fitkit.DeviceMatch_pid_get
    if _newclass:
        pid = _swig_property(_fitkit.DeviceMatch_pid_get, _fitkit.DeviceMatch_pid_set)
    __swig_destroy__ = _fitkit.delete_DeviceMatch
    __del__ = lambda self: None
DeviceMatch_swigregister = _fitkit.DeviceMatch_swigregister
DeviceMatch_swigregister(DeviceMatch)

class DeviceBackend(_object):
    """Proxy of C++ DeviceBackend class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceBackend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceBackend, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fitkit.delete_DeviceBackend
    __del__ = lambda self: None

    def start(self):
        """start(DeviceBackend self) -> bool"""
        return _fitkit.DeviceBackend_start(self)


    def stop(self):
        """stop(DeviceBackend self) -> bool"""
        return _fitkit.DeviceBackend_stop(self)


    def create(self, data):
        """create(DeviceBackend self, DeviceData data) -> Device"""
        return _fitkit.DeviceBackend_create(self, data)


    def initialize(self, device):
        """initialize(DeviceBackend self, Device device) -> bool"""
        return _fitkit.DeviceBackend_initialize(self, device)


    def isReady(self, dev):
        """isReady(DeviceBackend self, DeviceData dev) -> bool"""
        return _fitkit.DeviceBackend_isReady(self, dev)


    def prepare(self):
        """prepare(DeviceBackend self) -> bool"""
        return _fitkit.DeviceBackend_prepare(self)


    def update(self, incoming):
        """update(DeviceBackend self, DeviceData::List & incoming)"""
        return _fitkit.DeviceBackend_update(self, incoming)


    def updateFinalize(self, devices):
        """updateFinalize(DeviceBackend self, DeviceList devices)"""
        return _fitkit.DeviceBackend_updateFinalize(self, devices)


    def addMatch(self, *args):
        """
        addMatch(DeviceBackend self, DeviceMatch match)
        addMatch(DeviceBackend self, int vid, int pid)
        """
        return _fitkit.DeviceBackend_addMatch(self, *args)


    def matchList(self):
        """matchList(DeviceBackend self) -> DeviceMatch::List &"""
        return _fitkit.DeviceBackend_matchList(self)


    def manager(self):
        """manager(DeviceBackend self) -> DeviceMgr"""
        return _fitkit.DeviceBackend_manager(self)

DeviceBackend_swigregister = _fitkit.DeviceBackend_swigregister
DeviceBackend_swigregister(DeviceBackend)

class DeviceMgr(_object):
    """Proxy of C++ DeviceMgr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceMgr, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(DeviceMgr self) -> DeviceMgr"""
        if self.__class__ == DeviceMgr:
            _self = None
        else:
            _self = self
        this = _fitkit.new_DeviceMgr(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fitkit.delete_DeviceMgr
    __del__ = lambda self: None

    def discover(self):
        """discover(DeviceMgr self) -> int"""
        return _fitkit.DeviceMgr_discover(self)


    def add(self, dev):
        """add(DeviceMgr self, Device dev) -> int"""
        return _fitkit.DeviceMgr_add(self, dev)


    def remove(self, dev):
        """remove(DeviceMgr self, Device dev) -> int"""
        return _fitkit.DeviceMgr_remove(self, dev)


    def update(self, dev):
        """update(DeviceMgr self, Device dev) -> int"""
        return _fitkit.DeviceMgr_update(self, dev)


    def countAcquired(self):
        """countAcquired(DeviceMgr self) -> int"""
        return _fitkit.DeviceMgr_countAcquired(self)


    def count(self):
        """count(DeviceMgr self) -> int"""
        return _fitkit.DeviceMgr_count(self)


    def countFree(self):
        """countFree(DeviceMgr self) -> int"""
        return _fitkit.DeviceMgr_countFree(self)


    def release(self, dev):
        """release(DeviceMgr self, Device dev)"""
        return _fitkit.DeviceMgr_release(self, dev)


    def acquire(self, deviceId=-1):
        """
        acquire(DeviceMgr self, int deviceId=-1) -> Device
        acquire(DeviceMgr self) -> Device
        """
        return _fitkit.DeviceMgr_acquire(self, deviceId)


    def device(self, deviceId):
        """device(DeviceMgr self, int deviceId) -> Device"""
        return _fitkit.DeviceMgr_device(self, deviceId)


    def __getitem__(self, deviceId):
        """__getitem__(DeviceMgr self, int deviceId) -> Device"""
        return _fitkit.DeviceMgr___getitem__(self, deviceId)


    def registerBackend(self, backend):
        """registerBackend(DeviceMgr self, DeviceBackend backend) -> bool"""
        return _fitkit.DeviceMgr_registerBackend(self, backend)


    def unregisterBackend(self, backend):
        """unregisterBackend(DeviceMgr self, DeviceBackend backend) -> bool"""
        return _fitkit.DeviceMgr_unregisterBackend(self, backend)


    def backends(self):
        """backends(DeviceMgr self) -> BackendList"""
        return _fitkit.DeviceMgr_backends(self)


    def list(self):
        """list(DeviceMgr self) -> DeviceList"""
        return _fitkit.DeviceMgr_list(self)


    def lock(self):
        """lock(DeviceMgr self)"""
        return _fitkit.DeviceMgr_lock(self)


    def unlock(self):
        """unlock(DeviceMgr self)"""
        return _fitkit.DeviceMgr_unlock(self)


    def deviceAcquired(self, deviceId):
        """deviceAcquired(DeviceMgr self, int deviceId)"""
        return _fitkit.DeviceMgr_deviceAcquired(self, deviceId)


    def deviceReleased(self, deviceId):
        """deviceReleased(DeviceMgr self, int deviceId)"""
        return _fitkit.DeviceMgr_deviceReleased(self, deviceId)


    def deviceFound(self, deviceId):
        """deviceFound(DeviceMgr self, int deviceId)"""
        return _fitkit.DeviceMgr_deviceFound(self, deviceId)


    def deviceLost(self, deviceId):
        """deviceLost(DeviceMgr self, int deviceId)"""
        return _fitkit.DeviceMgr_deviceLost(self, deviceId)


    def deviceUpdated(self, deviceId):
        """deviceUpdated(DeviceMgr self, int deviceId)"""
        return _fitkit.DeviceMgr_deviceUpdated(self, deviceId)

    def __disown__(self):
        self.this.disown()
        _fitkit.disown_DeviceMgr(self)
        return weakref_proxy(self)
DeviceMgr_swigregister = _fitkit.DeviceMgr_swigregister
DeviceMgr_swigregister(DeviceMgr)


def DEBUG_MSG(fmt):
    """DEBUG_MSG(char const * fmt)"""
    return _fitkit.DEBUG_MSG(fmt)

def str2channel(key):
    """str2channel(char const * key) -> Device::ChannelId"""
    return _fitkit.str2channel(key)

def str2bits(key):
    """str2bits(char const * key) -> Device::Bits"""
    return _fitkit.str2bits(key)

def str2sbits(key):
    """str2sbits(char const * key) -> Device::StopBits"""
    return _fitkit.str2sbits(key)

def str2parity(key):
    """str2parity(char const * key) -> Device::Parity"""
    return _fitkit.str2parity(key)

def channel2str(val):
    """channel2str(Device::ChannelId val) -> char const *"""
    return _fitkit.channel2str(val)

def bits2str(val):
    """bits2str(Device::Bits val) -> char const *"""
    return _fitkit.bits2str(val)

def sbits2str(val):
    """sbits2str(Device::StopBits val) -> char const *"""
    return _fitkit.sbits2str(val)

def parity2str(val):
    """parity2str(Device::Parity val) -> char const *"""
    return _fitkit.parity2str(val)

def int2channel(key):
    """int2channel(int key) -> Device::ChannelId"""
    return _fitkit.int2channel(key)

def int2bits(key):
    """int2bits(int key) -> Device::Bits"""
    return _fitkit.int2bits(key)

def int2sbits(key):
    """int2sbits(int key) -> Device::StopBits"""
    return _fitkit.int2sbits(key)

def int2parity(key):
    """int2parity(int key) -> Device::Parity"""
    return _fitkit.int2parity(key)

def channel2int(val):
    """channel2int(Device::ChannelId val) -> int"""
    return _fitkit.channel2int(val)

def bits2int(val):
    """bits2int(Device::Bits val) -> int"""
    return _fitkit.bits2int(val)

def sbits2int(val):
    """sbits2int(Device::StopBits val) -> int"""
    return _fitkit.sbits2int(val)

def parity2int(val):
    """parity2int(Device::Parity val) -> int"""
    return _fitkit.parity2int(val)

class pyDeviceMgr(DeviceMgr):

    def __init__(self, debugMessages=True):
        """Simple DeviceMgr"""
        self.debugMessages = debugMessages
        DeviceMgr.__init__(self)

    def deviceLost(self, deviceId):
        if (self.debugMessages):
            print "%s: Device %d acquired" % (self.__class__.__name__, deviceId)

    def deviceAcquired(self, deviceId):
        if (self.debugMessages):
            print "%s: Device %d acquired" % (self.__class__.__name__, deviceId)

    def deviceReleased(self, deviceId):
        if (self.debugMessages):
            print "%s: Device %d released" % (self.__class__.__name__, deviceId)

    def deviceFound(self, deviceId):
        if (self.debugMessages):
            print "%s: Device %d found" % (self.__class__.__name__, deviceId)

"""Compatibility device manager."""
class FitKitMgr (pyDeviceMgr):

    def __init__(self, vidpidpairs=[], debugMessages=True):
        """Simple DeviceMgr"""
        pyDeviceMgr.__init__(self, debugMessages)
        if not vidpidpairs: return
        for vid_pid in vidpidpairs:
            assert len(vid_pid) == 2 and (isinstance(vid_pid, list) or isinstance(vid_pid, tuple))
            for b in self.backends():
                b.addMatch(*vid_pid)


# This file is compatible with both classic and new-style classes.


