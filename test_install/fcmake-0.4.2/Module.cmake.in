# Simple module export for CMake projects
# Needed variables:
# * PROJECT_NAME
# * MAJOR_VERSION
# * MINOR_VERSION
# * PATCH_VERSION

# Get uppercase
string(TOUPPER @PROJECT_NAME@ @PROJECT_NAME@_u)
string(TOLOWER @PROJECT_NAME@ @PROJECT_NAME@_lc)

# Build version string
set(vs_@PROJECT_NAME@ "")
set(vs_m_@PROJECT_NAME@ @MAJOR_VERSION@)
set(vs_n_@PROJECT_NAME@ @MINOR_VERSION@)
set(vs_p_@PROJECT_NAME@ @PATCH_VERSION@)

# Default values
if(NOT vs_m_@PROJECT_NAME@)
    set(vs_m_@PROJECT_NAME@ 0)
endif(NOT vs_m_@PROJECT_NAME@)
if(NOT vs_n_@PROJECT_NAME@)
    set(vs_n_@PROJECT_NAME@ 0)
endif(NOT vs_n_@PROJECT_NAME@)

# Complete version string
set(vs_@PROJECT_NAME@ ${vs_m_@PROJECT_NAME@}.${vs_n_@PROJECT_NAME@})
if(vs_p_@PROJECT_NAME@)
    set(vs_@PROJECT_NAME@ ${vs_@PROJECT_NAME@}.${vs_p_@PROJECT_NAME@})
endif(vs_p_@PROJECT_NAME@)

# Set project version
set(${prj_name_u}_vs_@PROJECT_NAME@ ${vs_@PROJECT_NAME@})

# Include library
set(soname_@PROJECT_NAME@ ${@PROJECT_NAME@_lc}core)
string(REGEX REPLACE "^lib" "" soname_@PROJECT_NAME@ ${soname_@PROJECT_NAME@})
find_library(so_@PROJECT_NAME@ NAMES ${soname_@PROJECT_NAME@})

# Set include path
get_filename_component(@PROJECT_NAME@_bpath ${so_@PROJECT_NAME@} PATH)
get_filename_component(
    @PROJECT_NAME@_path
    ${@PROJECT_NAME@_bpath}/../include
    ABSOLUTE)
get_filename_component(
    @PROJECT_NAME@_ppath
    ${@PROJECT_NAME@_path}/../include/@PROJECT_NAME@
    ABSOLUTE)

# Export libraries
set(${@PROJECT_NAME@_u}_LIBRARIES ${so_@PROJECT_NAME@})

# Export include directories
set(${@PROJECT_NAME@_u}_INCLUDE_PATH
    ${@PROJECT_NAME@_path}
    ${@PROJECT_NAME@_ppath})

